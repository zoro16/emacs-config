#+TITLE: Emacs Configuration
#+AUTHOR: Mohamed Abdelgadir


* How to use
The =.emacs= file in home directory should only contain
#+BEGIN_SRC emacs-lisp :tangle no
(load-file "~/Essential/emacs-config/bootstrap.el")
#+END_SRC
where the path to bootstrap.el is adjusted to wherever you cloned this repo.
This will also automatically pull the latest version of the config on startup, unless you forbid it with
#+BEGIN_SRC emacs-lisp :tangle no
(setq config-no-auto-update t)
#+END_SRC

* Add Package Repositories
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))

  (when (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/")))

  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t) ; Org-mode's repository
  (add-to-list 'package-archives '("elpy" . "https://jorgenschaefer.github.io/packages/")) ; package-install elpy

  ;; Make sure the NonGNU repo is added
  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/"))

  (package-initialize)
#+END_SRC

* Security
** Check TLS
#+BEGIN_SRC emacs-lisp
  (setq tls-checktrust t)
  (setq gnutls-verify-error t)
#+END_SRC
** Add Certification path when on MacOS
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'darwin)
  (use-package gnutls
    :config
      (require 'gnutls)
      (add-to-list 'gnutls-trustfiles "/usr/local/etc/openssl/cert.pem"))
)
#+END_SRC

* Automatic package installation
** Install =use-package=
And its dependencies if needed.
#+BEGIN_SRC emacs-lisp
(mapc
 (lambda (package)
   (if (not (package-installed-p package))
       (progn
         (package-refresh-contents)
         (package-install package))))
 '(use-package diminish bind-key))
#+END_SRC
** Trigger =use-package=
And force the install of missing packages.
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'use-package))
(require 'diminish)
(require 'bind-key)
(setq use-package-always-ensure t)
#+END_SRC

* Configure Helm
** Make everything fuzzy and also rebind functions.
#+BEGIN_SRC emacs-lisp
  (use-package flx)
  (use-package helm-flx)
  (use-package helm)
    ;; :demand
    ;; :diminish helm-mode
    ;; :bind (("M-x" . helm-M-x)
    ;;        ("M-y" . helm-show-kill-ring)
    ;;        ("C-x b" . helm-mini)
    ;;        ("C-x C-f" . helm-find-files)
    ;;        ("C-x r l" . helm-bookmarks)
    ;;        ("C-c s" . helm-occur)
    ;;        :map helm-find-files-map ;; I like these from Ido
    ;;        ("C-<tab>"         . helm-execute-persistent-action)
    ;;        ("C-<backspace>" . helm-find-files-up-one-level))
    ;; :config
    ;; (helm-mode 1)
    ;; (helm-flx-mode +1)
    ;; (setq helm-M-x-fuzzy-match t)
    ;; (setq helm-locate-fuzzy-match t)
    ;; (setq helm-lisp-fuzzy-completion t)
    ;; (setq helm-bookmark-show-location t))
#+END_SRC
** Imenu + Helm with =imenu-anywhere=
But I find pulling from other buffer confusing so I limit to current buffer
#+BEGIN_SRC emacs-lisp
  (defun imenu-anywhere-same-buffer-p (current other)
    (eq current other))

  (use-package imenu-anywhere
    :bind (("C-c C-i" . helm-imenu-anywhere))
    :config (setq imenu-anywhere-buffer-filter-functions
                  '(imenu-anywhere-same-buffer-p)))
#+END_SRC
** Install =helm-system-packages=
#+BEGIN_SRC emacs-lisp
  (use-package helm-system-packages)
#+END_SRC

* Version Control
For now it's just git, but can add more systems as necessary.
** Enable magit
Best git client
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status))
#+END_SRC
** Add =git-timemachine=
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine)
#+END_SRC
** SSH Handling
#+BEGIN_SRC emacs-lisp
    (use-package ssh-agency)
#+END_SRC
* Set personal information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Mohamed Abdelgadir"
        calendar-latitude 52.520008
        calendar-longitude 13.404954
        calendar-location-name "Berlin, DE")
#+END_SRC

* Utility functions
** Generate scratch buffer
#+BEGIN_SRC emacs-lisp
(defun generate-scratch-buffer ()
  "Create and switch to a temporary scratch buffer with a random
     name."
  (interactive)
  (switch-to-buffer (make-temp-name "scratch-")))
#+END_SRC

** Sudo the current buffer
#+BEGIN_SRC emacs-lisp
(defun sudo ()
  "Use TRAMP to `sudo' the current buffer"
  (interactive)
  (when buffer-file-name
    (find-alternate-file
     (concat "/sudo:root@localhost:"
             buffer-file-name))))
#+END_SRC

** Replace JSON web token in buffer
This is regexp based
#+BEGIN_SRC emacs-lisp
(defun replace-token (token)
  "Replace JSON web token for requests"
  (interactive "sEnter the new token: ")
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "Bearer .*\"" nil t)
      (replace-match (concat "Bearer " token "\"")))))
#+END_SRC

** Open all marked files in Dired
I like this better than the one in =dired+=
#+BEGIN_SRC emacs-lisp
(eval-after-load "dired"
  '(progn
     (define-key dired-mode-map "F" 'my-dired-find-file)
     (defun my-dired-find-file (&optional arg)
       "Open each of the marked files, or the file under the point, or when prefix arg, the next N files "
       (interactive "P")
       (let* ((fn-list (dired-get-marked-files nil arg)))
         (mapc 'find-file fn-list)))))
#+END_SRC

** Open the current file in browser.
Thanks to [[https://github.com/purcell/emacs.d/blob/master/lisp/init-utils.el#L78]]
#+BEGIN_SRC emacs-lisp
(defun browse-current-file ()
  "Open the current file as a URL using `browse-url'."
  (interactive)
  (let ((file-name (buffer-file-name)))
    (if (and (fboundp 'tramp-tramp-file-p)
             (tramp-tramp-file-p file-name))
        (error "Cannot open tramp file")
      (browse-url (concat "file://" file-name)))))
#+END_SRC

# ** XML Format function
# This works well on short text, too much and it can block the system
# #+BEGIN_SRC emacs-lisp
# (use-package sgml-mode)

# (defun reformat-xml ()
#   (interactive)
#   (save-excursion
#     (sgml-pretty-print (point-min) (point-max))
#     (indent-region (point-min) (point-max))))
# #+END_SRC

** Refill paragraphs to be on one line
#+BEGIN_SRC emacs-lisp
(defun refill-paragraphs ()
  "fill individual paragraphs with large fill column"
  (interactive)
  (let ((fill-column 100000))
    (fill-individual-paragraphs (point-min) (point-max))))
#+END_SRC

** Copy filename and path to clipboard
Thanks to http://emacsredux.com/blog/2013/03/27/copy-filename-to-the-clipboard/
#+BEGIN_SRC emacs-lisp
(defun copy-filename ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+END_SRC

** Align docstring
I put a double space in between what I want to align and call this:
#+BEGIN_SRC emacs-lisp
(defun align-docstring ()
  "Align lines by double space"
  (interactive)
  (align-regexp (region-beginning) (region-end) "\\(\\s-*\\)  " 1 1 t))
#+END_SRC

** Rename local variable
#+BEGIN_SRC emacs-lisp
(defun rename-local-var (name)
  (interactive "sEnter new name: ")
  (let ((var (word-at-point)))
    (mark-defun)
    (replace-string var name nil (region-beginning) (region-end))))
#+END_SRC

** Increment/decrement number at point
#+BEGIN_SRC emacs-lisp
  (defun increment-number-at-point ()
    (interactive)
    (skip-chars-backward "0-9")
    (or (looking-at "[0-9]+")
        (error "No number at point"))
    (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))

  (defun decrement-number-at-point ()
    (interactive)
    (skip-chars-backward "0-9")
    (or (looking-at "[0-9]+")
        (error "No number at point"))
    (replace-match (number-to-string (- (string-to-number (match-string 0)) 1))))
#+END_SRC

** Comment a line
Before Emacs 25.1
#+BEGIN_SRC emacs-lisp
  (defun comment-line ()
    (interactive)
    (save-excursion
      (end-of-line)
      (set-mark (point))
      (beginning-of-line)
      (if (comment-only-p (region-beginning) (region-end))
          (uncomment-region (region-beginning) (region-end))
        (comment-region (region-beginning) (region-end)))))
#+END_SRC

** Quickly edit this config file
#+BEGIN_SRC emacs-lisp
  (defun edit-config-file ()
    (interactive)
    (find-file (concat config-load-path "config.org")))
#+END_SRC

** Send the current selection in an email
This uses mutt.
#+BEGIN_SRC emacs-lisp
  (defun email-selection ()
    (interactive)
    (copy-region-as-kill (region-beginning) (region-end))
    (let ((tmp-file (concat "/tmp/" (buffer-name (current-buffer))))
          (recipient (read-string "Enter a recipient: "))
          (subject (read-string "Enter a subject: ")))
      (find-file tmp-file)
      (yank)
      (save-buffer)
      (kill-buffer (current-buffer))
      (shell-command (concat "mutt -s \"" subject "\" " recipient " < " tmp-file))
      (shell-command (concat "rm -f " tmp-file)))
    (message "Sent!"))
#+END_SRC

** Move files more intuitively
#+BEGIN_SRC emacs-lisp
  (defun move-file ()
    "Write this file to a new location, and delete the old one."
    (interactive)
    (let ((old-location (buffer-file-name)))
      (call-interactively #'write-file)
      (when old-location
        (delete-file old-location))))
#+END_SRC

** Insert a filename at point
#+BEGIN_SRC emacs-lisp
  (defun insert-filename ()
    (interactive)
    (insert (read-file-name "File:")))
#+END_SRC

** Insert a relative filename at point
#+BEGIN_SRC emacs-lisp
  (defun insert-relative-filename ()
    (interactive)
    (insert (file-relative-name (read-file-name "File: "))))
#+END_SRC

** Format long function parameter list into multiline
#+BEGIN_SRC emacs-lisp
  (defun format-function-parameters ()
    "Turn the list of function parameters into multiline."
    (interactive)
    (beginning-of-line)
    (search-forward "(" (line-end-position))
    (newline-and-indent)
    (while (search-forward "," (line-end-position) t)
      (newline-and-indent))
    (end-of-line)
    (c-hungry-delete-forward)
    (insert " ")
    (search-backward ")")
    (newline-and-indent))
#+END_SRC

** Eshell here
Thanks to Howard https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org
#+BEGIN_SRC emacs-lisp
  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the
      current buffer's file. The eshell is renamed to match that
      directory to make multiple eshell windows easier."
    (interactive)
    (let* ((height (/ (window-total-height) 3)))
      (split-window-vertically (- height))
      (other-window 1)
      (eshell "new")
      (insert (concat "ls"))
      (eshell-send-input)))

  (bind-key "C-!" 'eshell-here)
#+END_SRC

** Show pwd relative to current project
And copy to clipboard
#+BEGIN_SRC emacs-lisp
  (defun relative-pwd ()
    (interactive)
    (let* ((prj (cdr (project-current)))
           (current-file buffer-file-truename)
           (prj-name (file-name-as-directory (file-name-nondirectory (directory-file-name prj))))
           (output (concat prj-name (file-relative-name current-file prj))))
      (kill-new output)
      (message output)))
#+END_SRC

** Add JIRA ticket number to commit messages
#+BEGIN_SRC emacs-lisp
  (add-hook 'git-commit-setup-hook
      '(lambda ()
          (let ((has-ticket-title (string-match "^[A-Z]+-[0-9]+"
                                      (magit-get-current-branch)))
                (words (s-split-words (magit-get-current-branch))))
            (if has-ticket-title
                (insert (format "[%s-%s] " (car words) (car (cdr words))))))))
#+END_SRC

** Create needed files for GPG
#+BEGIN_SRC emacs-lisp
  (with-temp-file "~/.gnupg/gpg.conf"
    (insert "use-agent\npinentry-mode loopback"))

  (with-temp-file "~/.gnupg/gpg-agent.conf"
    (insert "allow-loopback-pinentry"))

#+END_SRC

* Custom key bindings
** Quickly revert a buffer
Useful if file changed on disk
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-c r") 'revert-buffer)
#+END_SRC
** Quickly evaluate a buffer or a region
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-c x") 'eval-buffer)
(define-key global-map (kbd "C-c X") 'eval-region)
#+END_SRC
** Use the Mac Style Home/End keys
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<home>") 'beginning-of-buffer)
  (global-set-key (kbd "<end>") 'end-of-buffer)
#+END_SRC
** Quickly turn on auto-fill
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c q") 'auto-fill-mode)
#+END_SRC
** Comment the current line
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-;") 'comment-line)
#+END_SRC


* Org-Mode
** Set environment
   #+BEGIN_SRC emacs-lisp
     (use-package f)
     (use-package org)

     (setq org-agenda-files '("~/Essential/org/agenda.org"))

     (defun org-file-path (filename)
       "Return the absolute address of an org file, given its relative name."
       (concat (file-name-as-directory org-directory) filename))

     (defun org-find-file ()
       "Leverage Helm to quickly open any org files."
       (interactive)
      ( find-file (concat org-directory
                          (helm-comp-read "Select your org file: "
                                          (directory-files org-directory nil "\.org$")))))
   #+END_SRC
** =Ditaa= jar file to specific path
#+BEGIN_SRC bash
  sudo cp worg/code/scripts/ditaa.jar /usr/share/emacs/29.1/lisp/contrib/scripts
#+END_SRC

** Use syntax highlighting in source blocks while editing
   #+BEGIN_SRC emacs-lisp
   (setq org-src-fontify-natively t)
   #+END_SRC
** Use =org-mode= for =*.txt= files
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
   (add-to-list 'auto-mode-alist '(".*/[0-9]*$" . org-mode))   ;; Journal entries
   #+END_SRC
** Set a dark background for source blocks
#+BEGIN_SRC emacs-lisp
  ;; (require 'color)
  ;; (if (display-graphic-p)
  ;;     (set-face-attribute 'org-block nil :background
  ;;                         (color-darken-name
  ;;                          (face-attribute 'default :background) 3)))

#+END_SRC
** Setup Org Agenda
   #+BEGIN_SRC emacs-lisp
   (define-key org-mode-map (kbd "C-c a") 'org-agenda)
   #+END_SRC
** Setup Org Capture
   #+BEGIN_SRC emacs-lisp
   (setq org-default-notes-file (concat org-directory "/notes.org"))
   (define-key global-map "\C-cc" 'org-capture)
   #+END_SRC
** Org Capture Templates
   #+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
   '(("t" "Tasks" entry
          (file+headline org-default-notes-file "Tasks")
          "* TODO %?\n %T\n %a")
     ("p" "Projects" entry
          (file+headline org-default-notes-file "Projects")
          "* %?\n ")
     ("e" "E-Learning" entry
          (file+headline org-default-notes-file "E-Learning")
          "* TODO %?\n %T\n %a")
     ("j" "Journal" entry
          (file+olp+datetree org-default-notes-file "Journal")
          "* %?\nEntered on %U\n %i\n")
     ("m" "Meeting Notes" entry
          (file+headline org-default-notes-file "Meeting Notes")
          "* %?\n ")
     ("s" "Scrum" entry
          (file+olp+datetree org-default-notes-file "Scrum")
          "* %?\n ")))
   #+END_SRC
** Set list of Tags
   #+BEGIN_SRC emacs-lisp
   (setq org-tag-alist '(("@work" . ?w)
                         ("@home" . ?h)
                         ("@event" . ?e)
                         ("project" . ?p)
                         ("study" . ?s)
                         ("planned" . ?x)
                         ("unplanned" . ?y)
                         ("2watch" . ?W)
                         ("laptop" . ?l)))
   #+END_SRC
** Shortcut keys to make it easier to edit text
   #+BEGIN_SRC emacs-lisp
   (defun org-text-bold () "Wraps the region with asterisks."
     (interactive)
     (surround-text "*"))
   (defun org-text-italics () "Wraps the region with slashes."
     (interactive)
     (surround-text "/"))
   (defun org-text-code () "Wraps the region with equal signs."
     (interactive)
     (surround-text "="))
   #+END_SRC
** Setup Meeting-Notes mode
   #+BEGIN_SRC emacs-lisp
   (defun meeting-notes ()
   "Call this after creating an org-mode heading for where the notes for the meeting
   should be. After calling this function, call 'meeting-done' to reset the environment."
       (interactive)
           (outline-mark-subtree)                              ;; Select org-mode section
           (narrow-to-region (region-beginning) (region-end))  ;; Only show that region
           (deactivate-mark)
           (delete-other-windows)                              ;; Get rid of other windows
           (text-scale-set 2)                                  ;; Text is now readable by others
           (fringe-mode 0)
           (message "When finished taking your notes, run meeting-done."))
   #+END_SRC
   #+BEGIN_SRC emacs-lisp
   (defun meeting-done ()
   "Attempt to 'undo' the effects of taking meeting notes."
       (interactive)
           (widen)                                       ;; Opposite of narrow-to-region
           (text-scale-set 0)                            ;; Reset the font size increase
           (fringe-mode 1)
           (winner-undo))                                ;; Put the windows back in place
   #+END_SRC
** KeyBindings for Meeting-Notes
  #+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "C-c m o") 'meeting-notes)
  (define-key org-mode-map (kbd "C-c m d") 'meeting-done)
  #+END_SRC
** Add more TODO keywords
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "STARTED(s!)" "|" "DONE(d!)" "WAITING(w@)" "CANCELLED(c@)")))
  (font-lock-add-keywords
    'org-mode `(("^\\*+ \\(TODO\\) "
                (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚑")
                          nil)))
               ("^\\*+ \\(STARTED\\) "
                (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚐")
                          nil)))
               ("^\\*+ \\(DONE\\) "
                (1 (progn (compose-region (match-beginning 1) (match-end 1) "✔")
                          nil)))
                 ("^\\*+ \\(WAITING\\) "
                (1 (progn (compose-region (match-beginning 1) (match-end 1) "⌛")
                          nil)))
               ("^\\*+ \\(CANCELLED\\) "
                (1 (progn (compose-region (match-beginning 1) (match-end 1) "✘")
                          nil)))))
  ;; (setq org-todo-keyword-faces
  ;;            '(("WAIT" . "yellow")
  ;;              ("CANCELLED" . (:foreground "blue" :weight bold))))
#+END_SRC
** Enable =flyspell=
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'text-mode-hook 'flyspell-mode)
#+END_SRC
** Setup =org-babel=
   Get additional languages?
   Load them all
#+BEGIN_SRC emacs-lisp
  (use-package ob-kotlin)
  (use-package ob-go)
  (use-package ob-rust)
  (use-package ob-clojurescript)
  (org-babel-do-load-languages
   (quote org-babel-load-languages)
   (quote ((emacs-lisp . t)
	   (dot . t)
	   (plantuml . t)
	   (python . t)
	   (gnuplot . t)
	   (shell . t)
	   (org . t)
	   (js . t)
	   (sql . t)
	   (awk . t)
	   (sed . t)
	   (ditaa . t)
	   (latex . t)
	   (go . t)
	   (rust . t)
	   (kotlin . t)
	   (clojurescript . t)
	   (haskell . t))))
#+END_SRC
** Enable =org-bullets=
   Make org files a bit more readable
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** Display images inline
#+BEGIN_SRC emacs-lisp
  (setq org-startup-with-inline-images t)
#+END_SRC
** Register more exports
   #+BEGIN_SRC emacs-lisp
   (use-package ox-twbs)
   (require 'ox-md)
   (require 'ox-twbs)
   #+END_SRC
** Setup quick access to org files
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'org-find-file)
#+END_SRC
** Use =org-journal=
#+BEGIN_SRC emacs-lisp
  (use-package org-journal
      :custom (org-journal-dir "~/Essential/org/journal" "Set journal location"))
#+END_SRC
** Presentations with =reveal.js=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ox-reveal
    :config
      (require 'ox-reveal)
      (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
      (setq Org-Reveal-title-slide nil))
#+END_SRC
** Presentation with =org-present=
#+BEGIN_SRC emacs-lisp :tangle yes

  ;; ;; Install org-present if needed
  ;; (unless (package-installed-p 'org-present)
  ;;   (package-install 'org-present))

  ;; ;; Install visual-fill-column
  ;; (unless (package-installed-p 'visual-fill-column)
  ;;   (package-install 'visual-fill-column))


  ;; (defun my/org-present-prepare-slide (buffer-name heading)
  ;;   ;; Show only top-level headlines
  ;;   (org-overview)

  ;;   ;; Unfold the current entry
  ;;   (org-show-entry)

  ;;   ;; Show only direct subheadings of the slide but don't expand them
  ;;   (org-show-children))

  ;; (defun my/org-present-start ()
  ;;   ;; Configure fill width
  ;;   (setq visual-fill-column-width 110
  ;; 	visual-fill-column-center-text t)

  ;;   ;; Tweak font sizes
  ;;   (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
  ;; 				     (header-line (:height 4.0) variable-pitch)
  ;; 				     (org-document-title (:height 1.75) org-document-title)
  ;; 				     (org-code (:height 1.55) org-code)
  ;; 				     (org-verbatim (:height 1.55) org-verbatim)
  ;; 				     (org-block (:height 1.25) org-block)
  ;; 				     (org-block-begin-line (:height 0.7) org-block)))

  ;;   ;; Set a blank header line string to create blank space at the top
  ;;   (setq header-line-format " ")

  ;;   ;; Display inline images automatically
  ;;   (org-display-inline-images)

  ;;   ;; Center the presentation and wrap lines
  ;;   (visual-fill-column-mode 1)
  ;;   (visual-line-mode 1))

  ;; (defun my/org-present-end ()
  ;;   ;; Reset font customizations
  ;;   (setq-local face-remapping-alist '((default variable-pitch default)))

  ;;   ;; Clear the header line string so that it isn't displayed
  ;;   (setq header-line-format nil)

  ;;   ;; Stop displaying inline images
  ;;   (org-remove-inline-images)

  ;;   ;; Configure fill width
  ;;   (setq visual-fill-column-width -1
  ;; 	visual-fill-column-center-text -1)

  ;;   ;; Stop centering the document
  ;;   (visual-fill-column-mode -1)
  ;;   (visual-line-mode -1))


  ;; ;; Register hooks with org-present
  ;; (add-hook 'org-present-mode-hook 'my/org-present-start)
  ;; (add-hook 'org-present-mode-quit-hook 'my/org-present-end)
  ;; (add-hook 'org-present-after-navigate-functions 'my/org-present-prepare-slide)


#+END_SRC
** Animate gif in org-mode
#+BEGIN_SRC emacs-lisp
(defun org-inline-image--get-current-image ()
  "Return the overlay associated with the image under point."
  (car (--select (eq (overlay-get it 'org-image-overlay) t) (overlays-at (point)))))

(defun org-inline-image--get (prop)
  "Return the value of property PROP for image under point."
  (let ((image (org-inline-image--get-current-image)))
    (when image
      (overlay-get image prop))))

(defun org-inline-image-animate ()
  "Animate the image if it's possible."
  (interactive)
  (let ((image-props (org-inline-image--get 'display)))
    (when (image-multi-frame-p image-props)
      (image-animate image-props))))

(defun org-inline-image-animate-auto ()
  (interactive)
  (when (eq 'org-mode major-mode)
    (while-no-input
      (run-with-idle-timer 0.3 nil 'org-inline-image-animate))))

(setq org-inline-image--get-current-image (byte-compile 'org-inline-image--get-current-image))
(setq org-inline-image-animate  (byte-compile 'org-inline-image-animate ))
(add-hook 'post-command-hook 'org-inline-image-animate-auto)
#+END_SRC
** Export HTML with =Htmlize=
   #+BEGIN_SRC emacs-lisp
   (use-package htmlize
     :config
       (require 'htmlize))

   #+END_SRC
** Preview Markdown with =grip-mode=
   #+BEGIN_SRC emacs-lisp
   (use-package grip-mode
     :ensure t
     :bind (:map markdown-mode-command-map
            ("g" . grip-mode)))
   #+END_SRC
** Github Flavored Markdown with =ox-gfm=
   #+BEGIN_SRC emacs-lisp
   (use-package ox-gfm)
   #+END_SRC
** HTML Preview
   #+BEGIN_SRC emacs-lisp
   (use-package org-preview-html)
   #+END_SRC

* Startup behavior
** Toggle fullscreen by default
#+BEGIN_SRC emacs-lisp
  (toggle-frame-maximized)
#+END_SRC
** Disable the big fat toolbars
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC
** Disable the scroll bar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC
** Disable splash screen
And set it in emacs-lisp mode
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq initial-major-mode 'emacs-lisp-mode)
#+END_SRC
** Empty Scratch buffer
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message nil)
#+END_SRC
** Show xkcd comic of the day on start
Only on mac or Linux as windows support isn't there yet.
Disabled for now because too slow on start.
#+BEGIN_SRC emacs-lisp :tangle no
(cond
 ((string-equal system-type "darwin") ; Mac OS X
  (progn
    (showxkcd)))
 ((string-equal system-type "gnu/linux") ; linux
  (progn
    (showxkcd))))
#+END_SRC
** Disable all warnings except for emergency
#+BEGIN_SRC emacs-lisp :tangle no
  (setq warning-minimum-level :emergency)
#+END_SRC

* Window behavior
** Disable the bell
Awful atrocious noise on Windows
#+BEGIN_SRC emacs-lisp
(setq visible-bell 1)
#+END_SRC

** Adjust scrolling behavior
#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq auto-window-vscroll nil)
#+END_SRC

** Always ask for confirmation before quitting
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

** Highlight the current line
#+BEGIN_SRC emacs-lisp
(when window-system
  (global-hl-line-mode))
#+END_SRC

** Use the back/forward mouse keys
#+BEGIN_SRC emacs-lisp
  (global-set-key [mouse-8] 'switch-to-prev-buffer)
  (global-set-key [mouse-9] 'switch-to-next-buffer)
#+END_SRC

** Enable line wrap
#+BEGIN_SRC emacs-lisp
  (setq-default visual-line-mode t)
  (add-hook 'visual-line-mode-hook 'visual-fill-column-mode)
  (global-set-key (kbd "C-x p") 'toggle-truncate-lines)
#+END_SRC

* Better defaults
Inspired from [[https://github.com/technomancy/better-defaults]]

** Replace dabbrev with hippie-expand
#+BEGIN_SRC emacs-lisp
  (use-package dabbrev
    :diminish abbrev-mode)
  (global-set-key (kbd "M-/") 'hippie-expand)
#+END_SRC

** Enable =ivy=
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume))
#+END_SRC
** Use =swiper=
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :config (global-set-key "\C-s" 'swiper))
#+END_SRC

** Use =councel=
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :config
      ;; (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      ;; (global-set-key (kbd "C-c g") 'counsel-git)
      ;; (global-set-key (kbd "C-c j") 'counsel-git-grep)
      ;; (global-set-key (kbd "C-c k") 'counsel-ag)
      ;; (global-set-key (kbd "C-x l") 'counsel-locate)
      ;; (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
#+END_SRC
** Use =smex=
   #+BEGIN_SRC emacs-lisp
   (use-package smex
     :ensure t
     :bind (("M-x" . smex))
     :config (smex-initialize))
   #+END_SRC
** Save all backup files to a common folder
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                               "backups"))))
#+END_SRC

** Replace 'yes/no' by just 'y/n
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Auto reload tags
#+BEGIN_SRC emacs-lisp
(setq tags-revert-without-query 1)
#+END_SRC

** Disable warning for =narrow-to=region=
#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC

* Load Cool Theme
#+BEGIN_SRC emacs-lisp
  ;; (use-package solarized-theme
  ;;   :config (load-theme 'solarized-dark t))

   ;; (use-package doom-themes
   ;;  :config
   ;;  ;; Global settings (defaults)
   ;;  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
   ;;    doom-themes-enable-italic t) ; if nil, italics is universally disabled
   ;;  (load-theme 'doom-solarized-dark t)

   ;;   ;; Enable flashing mode-line on errors
   ;;  (doom-themes-visual-bell-config))


   ;; Let the desktop background show through
  ;; (set-frame-parameter (selected-frame) 'alpha '(97 . 100))
  ;; (add-to-list 'default-frame-alist '(alpha . (90 . 90)))

     ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;;   (doom-themes-neotree-config)
  ;;    ;; or for treemacs users
  ;;   ;; (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  ;;   ;; (doom-themes-treemacs-config)

  ;;    ;; Corrects (and improves) org-mode's native fontification.
  ;;   (doom-themes-org-config)

   ;; (use-package spacemacs-common

   ;;   :ensure spacemacs-theme
   ;;   :config (load-theme 'spacemacs-dark t))
   ;; REMEMBER TO SET THIS COLOR ON THE `spacemacs-common.el` FILE, REPLACE `#2aa1ae' WITH `#626262`
   ;; (custom-set-variables '(spacemacs-theme-custom-colors
   ;;                       '((comment . "#626262"))))


   ;; (use-package foggy-night-theme
   ;;     :config (load-theme 'foggy-night t))


   ;; ;
					  ; (use-package color-theme-sanityinc-tomorrow
   ;;   :config (load-theme 'sanityinc-tomorrow-eighties t))

   ;; (use-package dracula-theme
   ;;   :config (load-theme 'dracula t))

   ;; (use-package spacegray-theme
   ;;   :config (load-theme 'spacegray t))

   (use-package gruvbox-theme
     :config (load-theme 'gruvbox-dark-hard t))

   ;; (use-package afternoon-theme
   ;;   :config (load-theme 'afternoon t))

#+END_SRC

* All The Icons
#+BEGIN_SRC emacs-lisp
  ;; https://github.com/domtronn/all-the-icons.el
  (use-package all-the-icons
    :custom
    (all-the-icons-install-fonts))
  (use-package all-the-icons-gnus)
  (use-package all-the-icons-ivy-rich)
  (use-package all-the-icons-ibuffer)
  (use-package all-the-icons-dired)
  (use-package all-the-icons-completion)
  (use-package treemacs-all-the-icons)
#+END_SRC


* Customize the mode-line
** A small trim of the original
#+BEGIN_SRC emacs-lisp
  (setq-default mode-line-format '("%e"
                                   mode-line-front-space
                                   " "
                                   mode-line-modified
                                   " "
                                   "%[" mode-line-buffer-identification "%]"
                                   "   "
                                   "L%l"
                                   "  "
                                   "C%c"
                                   " "
                                   mode-line-modes
                                   mode-line-misc-info
                                   projectile-mode-line
                                   " "
                                   (vc-mode vc-mode)
                                   mode-line-end-spaces))
#+END_SRC
** Load Tarsius' minions
#+BEGIN_SRC emacs-lisp
  (use-package minions
    :config (minions-mode 1))
#+END_SRC

* Fonts
# Use the Hack font from [[https://github.com/chrissimpkins/Hack][chrissimpkins]]
#+BEGIN_SRC emacs-lisp
    ;; (if (condition-case nil
    ;;     (x-list-fonts "Hack")
    ;;   (error nil))
    ;;     (progn
    ;;   (add-to-list 'default-frame-alist '(font . "Hack-13"))
    ;;   (set-face-attribute 'default nil :font "Hack-13")))

  ;; ;; Set reusable font name variables
  (defvar my/fixed-width-font "JetBrains Mono"
    "The font to use for monospaced (fixed width) text.")

  (defvar my/variable-width-font "Iosevka"
    "The font to use for variable-pitch (document) text.")

  ;; NOTE: These settings might not be ideal for your machine, tweak them as needed!
  (set-face-attribute 'default nil :font my/fixed-width-font :weight 'regular :height 110)
  (set-face-attribute 'fixed-pitch nil :font my/fixed-width-font :weight 'regular :height 130)
  (set-face-attribute 'variable-pitch nil :font my/variable-width-font :weight 'light :height 140)

#+END_SRC

* Terminal Configuration
Trying to make it adapt to the OS.
There is surely a better way to do this.
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
    (progn
      (setenv "PATH" (concat "C:\\cygwin64\\bin\\"
                             path-separator
                             (getenv "PATH")))
      )
  (progn
    (use-package exec-path-from-shell
      :config (exec-path-from-shell-copy-env "PATH"))
    )
  )
#+END_SRC

* Terminal Emulator
** vTerm
   #+BEGIN_SRC emacs-lisp
       (use-package vterm)
   #+END_SRC
** Multi-vTerm
   #+BEGIN_SRC emacs-lisp
       (use-package multi-vterm)
   #+END_SRC

* Snippets
I use =yasnippet= a lot.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :config (yas-global-mode 1))
#+END_SRC
And also my package =org-sync-snippets= to keep my snippets into a single file under version control
#+BEGIN_SRC emacs-lisp
  (use-package org-sync-snippets
    :config (setq org-sync-snippets-org-snippets-file
                  (concat (file-name-as-directory config-load-path) "snippets.org")))
#+END_SRC

* Code Format
** Default tab and indetation
#+BEGIN_SRC emacs-lisp
  (use-package smart-tabs-mode
    :commands (smart-tabs-mode)
    :init
    (add-hook 'c-mode-common-hook #'smart-tabs-mode)
    :config
    (smart-tabs-advice c-indent-line     c-basic-offset)
    (smart-tabs-advice c-indent-region   c-basic-offset))

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq tab-width 4)
  (setq tab-stop-list '(2 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80))

#+END_SRC
** Add a new line at the end of files
#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC
** Delete trailing white spaces on save
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** Set Unix file coding system
#+BEGIN_SRC emacs-lisp
  (setq-default buffer-file-coding-system 'utf-8-unix)
  (setq-default default-buffer-file-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
  (prefer-coding-system 'utf-8-unix)
#+END_SRC
** Automatically indent yanked code
Thanks to [[https://github.com/magnars/.emacs.d/blob/master/defuns/editing-defuns.el#L99-L124][magnars]]
#+BEGIN_SRC emacs-lisp
  ;; (defvar yank-indent-modes '(php-mode js2-mode)
  ;;   "Modes in which to indent regions that are yanked (or yank-popped)")

  ;; (defvar yank-advised-indent-threshold 1000
  ;;   "Threshold (# chars) over which indentation does not automatically occur.")

  ;; (defun yank-advised-indent-function (beg end)
  ;;   "Do indentation, as long as the region isn't too large."
  ;;   (if (<= (- end beg) yank-advised-indent-threshold)
  ;;       (indent-region beg end nil)))

  ;; (defadvice yank (after yank-indent activate)
  ;;   "If current mode is one of 'yank-indent-modes, indent yanked text (with prefix arg don't indent)."
  ;;   (if (and (not (ad-get-arg 0))
  ;;            (--any? (derived-mode-p it) yank-indent-modes))
  ;;       (let ((transient-mark-mode nil))
  ;;         (yank-advised-indent-function (region-beginning) (region-end)))))

  ;; (defadvice yank-pop (after yank-pop-indent activate)
  ;;   "If current mode is one of 'yank-indent-modes, indent yanked text (with prefix arg don't indent)."
  ;;   (if (and (not (ad-get-arg 0))
  ;;            (member major-mode yank-indent-modes))
  ;;       (let ((transient-mark-mode nil))
  ;;         (yank-advised-indent-function (region-beginning) (region-end)))))

  ;; (defun yank-unindented ()
  ;;   (interactive)
  ;;   (yank 1))
#+END_SRC
** Define comment syntax
#+BEGIN_SRC emacs-lisp
  (setq comment-start "#")
#+END_SRC
** Enable =prog-fill=
#+BEGIN_SRC emacs-lisp
  (use-package prog-fill
    :bind (("M-q" . prog-fill)))
#+END_SRC
* Parenthesis Support
#+BEGIN_SRC emacs-lisp
(show-paren-mode)
(electric-pair-mode)
#+END_SRC

* Package management
** Enable =paradox=
#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :custom
    (paradox-execute-asynchronously t)
    :config
    (paradox-enable))
#+END_SRC

* Navigation
** Enable =avy=
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind (("C-c SPC" . avy-goto-char-2)
           ("M-g f" . avy-goto-line)
           ("M-g w" . avy-goto-word-1)))
#+END_SRC

** Enable =windmove=
Switching between frames
#+BEGIN_SRC emacs-lisp
  ;; (windmove-default-keybindings)

  (global-set-key (kbd "S-<left>")  'windmove-left)
  (global-set-key (kbd "S-<right>") 'windmove-right)
  (global-set-key (kbd "S-<up>")    'windmove-up)
  (global-set-key (kbd "S-<down>")  'windmove-down)
#+END_SRC

** Enable =which-key=
Very nice if you don't have a cheat sheet at hand
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :config (which-key-mode 1))
#+END_SRC

** Enable =winner-mode=
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
** Enable =smooth-scrolling=
But with a margin of 5
#+BEGIN_SRC emacs-lisp
(use-package smooth-scrolling
  :config
  (smooth-scrolling-mode 1)
  (setq smooth-scroll-margin 5))
#+END_SRC

** Enable =neotree=
#+BEGIN_SRC emacs-lisp
(use-package neotree)
#+END_SRC
** Enable =ibuffer=
#+BEGIN_SRC emacs-lisp
(use-package ibuffer-vc)
(use-package ibuffer-git)
(define-key global-map (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** Enable =yascroll=
So much better than the default scroll bar
#+BEGIN_SRC emacs-lisp
(use-package yascroll
  :config (global-yascroll-bar-mode 1))
#+END_SRC
** Enable =minimap=
Not all the time, but handy.
#+BEGIN_SRC emacs-lisp
(use-package minimap
  :config
  (setq minimap-window-location "right")
  (setq minimap-major-modes '(prog-mode org-mode)))
#+END_SRC
** Enable =rotate=
#+BEGIN_SRC emacs-lisp
  (use-package rotate
    :config (global-set-key (kbd "C-|") 'rotate-layout))
#+END_SRC
** Enable =anzu=
#+BEGIN_SRC emacs-lisp
(use-package anzu
  :config (global-anzu-mode +1)
          (setq anzu-mode-lighter ""))
#+END_SRC
** Enable =hamburger-menu=
#+BEGIN_SRC emacs-lisp
  (use-package hamburger-menu
    :config (setq mode-line-front-space 'hamburger-menu-mode-line))
#+END_SRC
** Enable =hs-minor-mode= for folding
Great to fold code
#+BEGIN_SRC emacs-lisp
  (define-globalized-minor-mode global-hs-minor-mode
  hs-minor-mode hs-minor-mode)
  (global-hs-minor-mode 1)
  (global-set-key (kbd "C-c h s") 'hs-show-all)
  (global-set-key (kbd "C-c h a") 'hs-hide-all)
  (global-set-key (kbd "C-c h g") 'hs-toggle-hiding)
#+END_SRC
** Enable =eyebrowse=
To manage window configuration
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :config (eyebrowse-mode t))
#+END_SRC
* Edition
** Enable =multiple-cursors=
Useful to edit multiple similar lines
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C-<" . mc/mark-all-like-this)
         ("C-S-<mouse-1>" . mc/add-cursor-on-click)))
#+END_SRC

** Enable =zzz-to-char=
#+BEGIN_SRC emacs-lisp
(use-package zzz-to-char
  :bind ("M-z" . zzz-up-to-char))
#+END_SRC
** Enable =whole-line-or-region=
#+BEGIN_SRC emacs-lisp
  (use-package whole-line-or-region
    :diminish whole-line-or-region-global-mode
    :config (whole-line-or-region-global-mode t))
#+END_SRC
** Enable =viking-mode=
And add my personal twist to it.
#+BEGIN_SRC emacs-lisp
  (use-package viking-mode
    :diminish viking-mode
    :config
    (viking-global-mode)
    (setq viking-greedy-kill nil)
    (setq viking-enable-region-kill t)
    (setq viking-kill-functions (list '(lambda()
                                         (if (region-active-p)
                                             (kill-region (region-beginning) (region-end))
                                         (delete-char 1 t)))
                                      '(lambda()
                                         (insert (pop kill-ring)) ;; insert the char back
                                         (kill-new "") ;; start a new entry in the kill-ring
                                         (viking-kill-word)
                                         (kill-append " " nil)) ;; append the extra space
                                      'viking-kill-line-from-point
                                      'viking-kill-line
                                      'viking-kill-paragraph
                                      'viking-kill-buffer)))
#+END_SRC

** Enable =undo-tree=
#+BEGIN_SRC emacs-lisp
  ;; (use-package undo-tree
  ;;   :diminish undo-tree-mode
  ;;   :config
  ;;   (global-undo-tree-mode t)
  ;;   (setq undo-tree-visualizer-diff t))
#+END_SRC

** Enable =volatile-highlights=
Sweet minor mode for providing visual feedback
#+BEGIN_SRC emacs-lisp
  (use-package volatile-highlights
    :diminish volatile-highlights-mode
    :config
    (vhl/define-extension 'undo-tree 'undo-tree-yank 'undo-tree-move)
    (vhl/install-extension 'undo-tree)
    (volatile-highlights-mode t))
#+END_SRC

** Enable =ciel=
#+BEGIN_SRC emacs-lisp
(use-package ciel
  :bind (("C-c i" . ciel-ci)
         ("C-c o" . ciel-co)))
#+END_SRC

** Enable =fancy-narrow=
And use it to replace normal narrowing functions
#+BEGIN_SRC emacs-lisp
  (use-package fancy-narrow
    :diminish fancy-narrow-mode)
#+END_SRC
* General Code
** Enable =projectile=
And get a shorter modeline, thanks to [[https://github.com/purcell/emacs.d/blob/master/lisp/init-projectile.el#L10]]
#+BEGIN_SRC emacs-lisp
  (use-package ag)
  (use-package helm-ag)
  (setq projectile-go-function nil) ;; temporary workaround
  (use-package projectile
    :config
    (projectile-mode)
    (setq-default projectile-mode-line
     '(:eval
       (if (file-remote-p default-directory)
           " Proj"
         (format " Proj[%s]" (projectile-project-name)))))
    (add-to-list 'projectile-globally-ignored-directories "node_modules"))
#+END_SRC

With a twist of helm
#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :bind (("C-c v" . helm-projectile)
         ("C-c C-v" . helm-projectile-ag)
         ("C-c w" . helm-projectile-switch-project)))
#+END_SRC
** Enable =company=
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure
  :custom
  (company-idle-delay 0.5) ;; how long to wait until popup
  ;; (company-begin-commands nil) ;; uncomment to disable popup
  :bind
  (:map company-active-map
	      ("C-n". company-select-next)
	      ("C-p". company-select-previous)
	      ("M-<". company-select-first)
	      ("M->". company-select-last)))

(use-package yasnippet
  :ensure
  :config
  (yas-reload-all)
  (add-hook 'prog-mode-hook 'yas-minor-mode)
  (add-hook 'text-mode-hook 'yas-minor-mode))

  ;; (use-package company
  ;;   :diminish company-mode
  ;;   :config
  ;;   (add-hook 'after-init-hook 'global-company-mode)
  ;;   (setq company-minimum-prefix-length 2)
  ;;   (setq company-dabbrev-downcase nil))
  ;; (use-package company-go)
#+END_SRC
** Enable =flycheck=
#+BEGIN_SRC emacs-lisp
;;  (use-package flycheck
;;    :diminish flycheck-mode
;;    :config (flycheck-mode 1)
;;    (setq flycheck-phpcs-standard "PSR2")
;;    (add-hook 'python-mode-hook 'flycheck-mode)
;;    (add-hook 'emacs-lisp-mode-hook 'flycheck-mode)
;;    (add-hook 'json-mode-hook 'flycheck-mode)
;;    (add-hook 'rjsx-mode-hook 'flycheck-mode))
#+END_SRC

Add a little helm twist to it
#+BEGIN_SRC emacs-lisp
(use-package helm-flycheck
  :bind ("C-c f" . helm-flycheck))
#+END_SRC

** Enable =electric-operator=
And add a couple of rules for PHP and JS
#+BEGIN_SRC emacs-lisp
  (use-package electric-operator
    :config
    (electric-operator-add-rules-for-mode 'php-mode
                                          (cons " - >" "->"))
    (electric-operator-add-rules-for-mode 'php-mode
                                          (cons " / /" "// "))
    (electric-operator-add-rules-for-mode 'php-mode
                                          (cons " = > " " => "))
    (electric-operator-add-rules-for-mode 'php-mode
                                          (cons " < ?" "<?"))
    (electric-operator-add-rules-for-mode 'js2-mode
                                          (cons " = > " " => "))
    (electric-operator-add-rules-for-mode 'js2-jsx-mode
                                          (cons " = > " " => "))
    (electric-operator-add-rules-for-mode 'rjsx-mode
                                          (cons " = > " " => ")))
#+END_SRC

** Enable =dumb-jump=
Great package to jump to definition
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :config (setq dumb-jump-aggressive nil))
#+END_SRC

** Enable =highlight-numbers=
Make numbers in source code more noticeable
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :config (add-hook 'prog-mode-hook 'highlight-numbers-mode))
#+END_SRC
** Show column numbers
    #+BEGIN_SRC emacs-lisp
    (setq column-number-mode t)
    #+END_SRC
** Highlight line
    #+BEGIN_SRC emacs-lisp
    (setq global-hl-line-mode t)
    #+END_SRC
** Highlight indentations
    #+BEGIN_SRC emacs-lisp
      ;; https://github.com/DarthFennec/highlight-indent-guides
      (use-package highlight-indent-guides
        :config
        (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
        (set-face-background 'highlight-indent-guides-odd-face "darkgray")
        (set-face-background 'highlight-indent-guides-even-face "dimgray")
        (set-face-foreground 'highlight-indent-guides-character-face "dimgray")
        (setq highlight-indent-guides-method 'fill))

    #+END_SRC
** Show line numbers
    #+BEGIN_SRC emacs-lisp
      (setq global-display-line-numbers-mode t)
      ;; (setq linum-format "%d ")
    #+END_SRC

* Emacs Lisp
** Enable =eldoc=
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode
    :config (add-hook 'emacs-lisp-mode-hook 'eldoc-mode))
#+END_SRC
** Enable =rainbow-delimiters=
But only for emacs-lisp
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :config
  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
** Enable =paredit=
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :config
  (add-hook 'emacs-lisp-mode-hook 'paredit-mode))
#+END_SRC
** Enable =eros=
#+BEGIN_SRC emacs-lisp
  (use-package eros
    :config (add-hook 'emacs-lisp-mode-hook 'eros-mode))
#+END_SRC
** Enable =simple-call-tree=
#+BEGIN_SRC emacs-lisp
  (use-package simple-call-tree)
#+END_SRC
** Enable =suggest=
#+BEGIN_SRC emacs-lisp
  (use-package suggest)
#+END_SRC


* lsp-mode
We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak
the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]]
so that you can learn which language servers are available and how to install them.
The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.
I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.
The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just
by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+BEGIN_SRC emacs-lisp

  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

#+END_SRC

* lsp-UI
[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+BEGIN_SRC emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+END_SRC

* lsp-treemacs
[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol,
or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+BEGIN_SRC emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+END_SRC

* Debugging with dap-mode
[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]].
You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration docs]] to learn how to configure the debugger for your language.
Also make sure to check out the documentation for the debug adapter to see what configuration parameters are available to use for your debug templates!

#+BEGIN_SRC emacs-lisp
  (use-package dap-mode)
    ;; (use-package dap-mode
    ;;   ;; Uncomment the config below if you want all UI panes to be hidden by default!
    ;;   ;; :custom
    ;;   ;; (lsp-enable-dap-auto-configure nil)
    ;;   ;; :config
    ;;   ;; (dap-ui-mode 1)

    ;;   ;; :config
    ;;   ;; ;; Set up Node debugging
    ;;   ;; (dap-node-setup) ;; Automatically installs Node debug adapter if needed

    ;;   ;; Bind `C-c l d` to `dap-hydra` for easy access
    ;;   (general-define-key
    ;;     :keymaps 'lsp-mode-map
    ;;     :prefix lsp-keymap-prefix
    ;;     "d" '(dap-hydra t :wk "debugger")))


#+END_SRC


* LaTex Mode
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'LaTeX-mode-hook #'latex-extra-mode)
  ;; (use-package magic-latex-buffer)
  ;; (add-hook 'latex-mode-hook 'magic-latex-buffer)
#+END_SRC

* Logs
** Turn on =auto-revert-tail-mode= for log files
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.log\\'" . auto-revert-tail-mode))
#+END_SRC

* Dired
** Enable =dired-x=
#+BEGIN_SRC emacs-lisp
  (require 'dired-x)
#+END_SRC
** Use human-readable sizes
#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-alh")
#+END_SRC

* YAML
** Enable =yaml-mode=
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :config
    (add-hook 'yaml-mode-hook 'flycheck-mode)
    (add-hook 'yaml-mode-hook 'flyspell-mode))
#+END_SRC

** Enable =flycheck-yamllint=
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-yamllint)
#+END_SRC

* Restclient
** Setup =restclient=
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :mode ("\\.restclient\\'" . restclient-mode))
#+END_SRC
** Enable =company-restclient=
#+BEGIN_SRC emacs-lisp
  (use-package company-restclient
    :config (add-to-list 'company-backends 'company-restclient))
#+END_SRC
** Integrate to =org-mode=
#+BEGIN_SRC emacs-lisp
  (use-package ob-restclient)
#+END_SRC

* PlantUML
** Enable =plantuml-mode=
#+BEGIN_SRC emacs-lisp
  (use-package plantuml-mode)
#+END_SRC
** Download and hook up plantuml.jar
#+BEGIN_SRC emacs-lisp
  (let ((plantuml-directory (concat config-load-path "extra/"))
        (plantuml-link "https://superb-dca2.dl.sourceforge.net/project/plantuml/plantuml.jar"))
    (let ((plantuml-target (concat plantuml-directory "plantuml.jar")))
      (if (not (f-exists? plantuml-target))
          (progn (message "Downloading plantuml.jar")
                 (shell-command
                  (mapconcat 'identity (list "wget" plantuml-link "-O" plantuml-target) " "))
                 (kill-buffer "*Shell Command Output*")))
      (setq org-plantuml-jar-path plantuml-target)))
#+END_SRC
* Extra Packages
No need to configure, just handy to have.
#+BEGIN_SRC emacs-lisp
  (use-package 2048-game)
  (use-package isend-mode)
  (use-package lorem-ipsum)
  (use-package markdown-mode)
  (use-package pdf-tools
    :defer t)
  (use-package refine)
  (use-package request)
  (use-package csv-mode)
  ;; (use-package csharp-mode)
  (use-package keychain-environment)
  (use-package prodigy)
  (use-package vlf)
  (use-package helm-flyspell)
#+END_SRC

* Extra file loading
If I am working on a separate library, I like to have it loaded on start.
Just need to place it in the extra folder.
#+BEGIN_SRC emacs-lisp
  (use-package load-dir
    :config (setq load-dirs (concat config-load-path "extra/")))
#+END_SRC

* Key Frequency
Trying the =keyfreq= package to monitor my command usage
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+END_SRC

* Eshell
Customize eshall
#+BEGIN_SRC emacs-lisp

  (use-package f3
    :config  (setq eshell-visual-commands
             '("less" "tmux" "htop" "top" "bash" "zsh" "fish"))

             (setq eshell-visual-subcommands
             '(("git" "log" "l" "diff" "show")))

             ;; Prompt with a bit of help from http://www.emacswiki.org/emacs/EshellPrompt
             (defmacro with-face (str &rest properties)
             `(propertize ,str 'face (list ,@properties)))

             (defun eshell/abbr-pwd ()
                (let ((home (getenv "HOME"))
                    (path (eshell/pwd)))
                (cond
                    ((string-equal home path) "~")
                    ((f-ancestor-of? home path) (concat "~/" (f-relative path home)))
                    (path))))

             (defun eshell/my-prompt ()
                 (let ((header-bg "#161616"))
                    (concat
                        (with-face (eshell/abbr-pwd) :foreground "#008700")
                    (if (= (user-uid) 0)
                        (with-face "#" :foreground "red")
                        (with-face "$" :foreground "#2345ba"))
                        " ")))
             (setq eshell-prompt-function 'eshell/my-prompt)
             (setq eshell-highlight-prompt nil)
             (setq eshell-prompt-regexp "^[^#$\n]+[#$] ")
             (setq eshell-cmpl-cycle-completions nil))
#+END_SRC


* Kubernetes
#+BEGIN_SRC emacs-lisp
(use-package kubernetes
  :ensure t
  :commands (kubernetes-overview)
  :config
  (setq kubernetes-poll-frequency 3600
        kubernetes-redraw-frequency 3600))
#+END_SRC

* Terraform
#+BEGIN_SRC emacs-lisp
  (use-package terraform-mode
    :config
    (defun my-terraform-mode-init ()
      if you want to use outline-minor-mode
      (outline-minor-mode 1))

    (add-hook 'terraform-mode-hook 'my-terraform-mode-init))

  ;; terraform-ls is requered
  ;; https://github.com/hashicorp/terraform-ls
  (use-package lsp-mode
    :ensure t
    :hook (terraform-mode . lsp-deferred)
    :commands (lsp lsp-deferred)
    :custom
    (lsp-disabled-clients '(tfls))
    (lsp-terraform-ls-prefill-required-fields t)
    (lsp-terraform-ls-enable-show-reference t)
    (lsp-semantic-tokens-enable t)
    (lsp-semantic-tokens-honor-refresh-requests t)
    (lsp-enable-links t))

#+END_SRC

* Docker
** Setup =Dockerfile-mode=
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :mode "Dockerfile\\'")
#+END_SRC

** Setup =Docker-Compose=
#+BEGIN_SRC emacs-lisp
  (use-package docker-compose-mode
    :mode "docker-compose\\'")
#+END_SRC

* Rego (Open Policy Agent Language)
#+BEGIN_SRC shell :tangle no
  curl -L -o opa https://openpolicyagent.org/downloads/v0.51.0/opa_linux_amd64_static
  chmod 755 opa
  mv opa ~/.local/bin
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; https://www.openpolicyagent.org/docs/v0.11.0/get-started/
  (use-package rego-mode
    :ensure t
    :custom
    (rego-repl-executable "~/.local/bin/opa")
    (rego-opa-command "~/.local/bin/opa"))
#+END_SRC

* JSON
  #+BEGIN_SRC emacs-lisp
  (use-package json-mode)
  #+END_SRC


* Web
** Enable =web-mode=
So much better than =html-mode=
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode "\\.phtml\\'"
  :mode "\\.volt\\'"
  :mode "\\.html\\'")
#+END_SRC

** Enable =emmet-mode=
Adding the necessary hooks
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
    )
#+END_SRC

* SQL
** Always make PostgreSQL the default product
#+BEGIN_SRC emacs-lisp
  (require 'sql)
  (sql-set-product "postgres")
#+END_SRC
** Enable =sqlup-mode=
#+BEGIN_SRC emacs-lisp
(use-package sqlup-mode
   :config (add-hook 'sql-mode-hook 'sqlup-mode))
#+END_SRC
** Enable =sql-indent=
#+BEGIN_SRC emacs-lisp
(use-package sql-indent
   :config (add-hook 'sql-mode-hook 'sqlind-minor-mode))
#+END_SRC

* PHP
** Enable =php-mode=
And a bunch of hooks with it
And set PSR-2 as coding style
#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :config
    (add-hook 'php-mode-hook 'flycheck-mode)
    (add-hook 'php-mode-hook 'electric-operator-mode)
    (add-hook 'php-mode-hook 'dumb-jump-mode)
    (add-hook 'php-mode-hook 'php-enable-psr2-coding-style))
#+END_SRC
** Enable =company-php=
#+BEGIN_SRC emacs-lisp
  (use-package company-php
    :config
    (add-hook 'php-mode-hook 'company-mode)
    (add-hook 'php-mode-hook '(lambda ()
                                (if (not (member 'php-mode company-dabbrev-code-modes))
                                    (add-to-list 'company-dabbrev-code-modes 'php-mode)))))
#+END_SRC
** Enable =php-eldoc=
#+BEGIN_SRC emacs-lisp
  (setq auto-complete-mode nil)
  (use-package php-eldoc
    :diminish eldoc-mode
    :config (add-hook 'php-mode-hook 'php-eldoc-enable))
#+END_SRC

* Javascript and Typescript
This is a basic configuration for the TypeScript language so that =.ts= files activate =typescript-mode= when opened.
We're also adding a hook to =typescript-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to get LSP features
every time we edit TypeScript code.

#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+END_SRC

*Important note!*  For =lsp-mode= to work with TypeScript (and JavaScript) you will need to install a language server on your machine.  If you have Node.js installed, the easiest way to do that is by running the following command:

#+BEGIN_SRC shell :tangle no
npm install -g typescript-language-server typescript
#+END_SRC

This will install the [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]] and the TypeScript compiler package.

* Go
A lot of the config is based on gocode, godef, goimports and gotags
packages that you should install separately.
#+BEGIN_SRC bash :tangle no
#   go get -u github.com/nsf/gocode
#   go get -u github.com/rogpeppe/godef
#   go get -u golang.org/x/tools/cmd/goimports
#   go get -u github.com/jstemmer/gotags
#   go get github.com/matryer/moq
#+END_SRC

** Enable =go-mode=
Absolutely necessary if working in Go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :config
    (add-hook 'before-save-hook #'gofmt-before-save)
    (add-hook 'go-mode-hook 'flycheck-mode)
    (add-hook 'go-mode-hook 'dumb-jump-mode)
    (setq go-packages-function 'go-packages-go-list))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t)
    :hook
    ((go-mode) . lsp))


  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-doc-enable t))

  ;; To set the garbage collection threshold to high (100 MB) since LSP client-server communication generates a lot of output/garbage
  (setq gc-cons-threshold 100000000)
  ;; To increase the amount of data Emacs reads from a process
  (setq read-process-output-max (* 1024 1024))
#+END_SRC

* Python
** Setup =python-mode and lsp-pyright=
Need to install IPython first with =pip install ipython=.
Assuming that it would be at least IPython 5 so ask for =simple-prompt=.
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'electric-operator-mode)
  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "--simple-prompt -i")


  ;; ;; You need to install pyright in the system first =pip install pyright=, for Mac you might want on install it with `npm` =sudo npm install -g pyright=
  ;; (use-package lsp-pyright
  ;;   :ensure t
  ;;   :hook (python-mode . (lambda ()
  ;;                          (require 'lsp-pyright)
  ;;                          (lsp-deferred)))
  ;;   :custom
  ;;   (python-shell-interpreter "python3"))  ; or lsp-deferred
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
#+END_SRC

* Rust
** Setup =rust-mode=
#+BEGIN_SRC emacs-lisp
    ;; (use-package rustic
    ;;   :ensure
    ;;   :bind (:map rustic-mode-map
    ;; 		("M-j" . lsp-ui-imenu)
    ;; 		("M-?" . lsp-find-references)
    ;; 		("C-c C-c l" . flycheck-list-errors)
    ;; 		("C-c C-c a" . lsp-execute-code-action)
    ;; 		("C-c C-c r" . lsp-rename)
    ;; 		("C-c C-c q" . lsp-workspace-restart)
    ;; 		("C-c C-c Q" . lsp-workspace-shutdown)
    ;; 		("C-c C-c s" . lsp-rust-analyzer-status))
    ;;   :config
    ;;   ;; uncomment for less flashiness
    ;;   ;; (setq lsp-eldoc-hook nil)
    ;;   ;; (setq lsp-enable-symbol-highlighting nil)
    ;;   ;; (setq lsp-signature-auto-activate nil)

    ;;   ;; comment to disable rustfmt on save
    ;;   (setq rustic-format-on-save t)
    ;;   (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

    ;; (defun rk/rustic-mode-hook ()
    ;;   ;; so that run C-c C-c C-r works without having to confirm, but don't try to
    ;;   ;; save rust buffers that are not file visiting. Once
    ;;   ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
    ;;   ;; no longer be necessary.
    ;;   (when buffer-file-name
    ;;     (setq-local buffer-save-without-query t))
    ;;   (add-hook 'before-save-hook 'lsp-format-buffer nil t))


  (use-package yasnippet
    :ensure t
    :hook ((lsp-mode . yas-minor-mode)))


  (use-package lsp-mode
    :ensure
    :commands lsp
    :custom
    ;; what to use when checking on-save. "check" is default, I prefer clippy
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-eldoc-render-all t)
    (lsp-idle-delay 0.6)
    ;; enable / disable the hints as you prefer:
    (lsp-inlay-hint-enable t)
    ;; These are optional configurations. See https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-analyzer/#lsp-rust-analyzer-display-chaining-hints for a full list
    (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
    (lsp-rust-analyzer-display-chaining-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names t)
    (lsp-rust-analyzer-display-closure-return-type-hints t)
    (lsp-rust-analyzer-display-parameter-hints t)
    (lsp-rust-analyzer-display-reborrow-hints t)
    :config
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))

  (use-package lsp-ui
    :ensure
    :commands lsp-ui-mode
    :custom
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-doc-enable nil))

  (use-package rust-mode
    :config (autoload 'rust-mode "rust-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
    (add-hook 'rust-mode-hook #'lsp))

#+END_SRC

* Java
#+BEGIN_SRC emacs-lisp
    ;; JAVA 17+ is required to be installed for jdtls
    ;; https://github.com/eruizc-dev/jdtls-launcher
    (use-package lsp-java :config
      (add-hook 'java-mode-hook 'lsp))
#+END_SRC

* Kotlin
** Enable =kotlin-mode=
   #+BEGIN_SRC emacs-lisp
   (use-package kotlin-mode)
    #+END_SRC
** Enable =ob-kotlin=
   #+BEGIN_SRC emacs-lisp
   (use-package ob-kotlin)
   (require 'ob-kotlin)
   #+END_SRC

* Scala
** Setup ==scala-mode=
#+BEGIN_SRC emacs-lisp
  ;; (use-package scala-mode
  ;;   :interpreter ("scala" . scala-mode))
#+END_SRC

* Clojure
#+BEGIN_SRC emacs-lisp
   (use-package clojure-mode
     :init
     (add-hook 'clojure-mode-hook 'lsp)
     (add-hook 'clojurescript-mode-hook 'lsp)
     (add-hook 'clojurec-mode-hook 'lsp))

  (when (cl-find-if-not #'package-installed-p package-selected-packages)
    (package-refresh-contents)
    (mapc #'package-install package-selected-packages))

  ;; (use-package cider)
  ;; (use-package clojure-lsp
  ;;   :ensure t
  ;;   :hook (clojure-mode . lsp-deferred)
  ;;   :commands (lsp lsp-deferred)
  ;;   :custom
  ;;   (setq lsp-clojure-custom-server-command '("bash" "-c" "/usr/local/bin/clojure-lsp"))
  ;;   (gc-cons-threshold (* 100 1024 1024))
  ;;   (read-process-output-max (* 1024 1024))
  ;;   (treemacs-space-between-root-nodes nil)
  ;;   (company-minimum-prefix-length 1)
  ;;   (lsp-enable-indentation nil) ; uncomment to use cider indentation instead of lsp
  ;;   (lsp-enable-completion-at-point nil)) ; uncomment to use cider completion instead of lsp
#+END_SRC
